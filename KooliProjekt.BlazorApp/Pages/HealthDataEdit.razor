@page "/healthdata/edit/{id:int}"
@inject IApiClient ApiClient
@inject NavigationManager Navigation

<PageTitle>Muuda kirjet</PageTitle>

@if (healthData == null)
{
    <p>Laadin...</p>
}
else
{
    <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Kaal:</label>
            <InputNumber @bind-Value="healthData.Weight" class="form-control" />
            <ValidationMessage For="@(() => healthData.Weight)" />
        </div>

        <div class="form-group">
            <label>Verrerõhk:</label>
            <InputNumber @bind-Value="healthData.Blood_pressure" class="form-control" />
            <ValidationMessage For="@(() => healthData.Blood_pressure)" />
        </div>

        <div class="form-group">
            <label>Veresuhkur:</label>
            <InputNumber @bind-Value="healthData.Blood_sugar" class="form-control" />
            <ValidationMessage For="@(() => healthData.Blood_sugar)" />
        </div>

        <button type="submit" class="btn btn-primary">Uuenda</button>
    </EditForm>
}

@code {
    [Parameter]
    public int id { get; set; }

    private HealthData healthData;
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    protected override async Task OnInitializedAsync()
    {
        var result = await ApiClient.List();
        healthData = result.Data?.Find(h => h.id == id);

        if (healthData != null)
        {
            editContext = new EditContext(healthData);
            messageStore = new ValidationMessageStore(editContext);
        }
    }

    private async Task HandleValidSubmit()
    {
        messageStore.Clear();
        var result = await ApiClient.Save(healthData);

        if (result.HasError)
        {
            foreach (var error in result.Errors)
            {
                foreach (var msg in error.Value)
                {
                    messageStore.Add(editContext.Field(error.Key), msg);
                }
            }
            editContext.NotifyValidationStateChanged();
        }
        else
        {
            Navigation.NavigateTo("/");
        }
    }
}
